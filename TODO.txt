
Endpoints:
	* POST /login
		o ook voor company accounts
	* GET /profile/user/:id
		o checken of huidige user toegang mag hebben
			volgens overleaf:
				* eigen gebruiker
				* business accounts
				* friends
			moeten we dat wel zo nauw beperken?
	* GET /vacancies/matching
		o wat als user een hoger diploma heeft dan hetgene opgelijst in de vacancy?
			* zullen we doen door elk diploma apart op te lijsten
				bijv #user1 heeft LagereSchoolDiploma, MiddelbareSchoolDiploma, Bachelor of Science, Master of Science, ? 
				kan zonder al te veel moeite in RDF naar mijn weten
					-> zullen hier maar voor gaan, zeker
					(ook nog endpoints toevoegen voor diplomas GET & POST)
	* PUT /profile/company
	* GET /profile/company/:id
		(Steven heeft hieraan gewerkt. Denk dat het af is voor het moment?)
	* POST /profile/company/:id
	* PUT /vacancy/
		(staat in verslag als /vacancy/:details, wss met xform-url-encoded werken?)
	* GET /vacancy/:id/matching
		(herbruik functie /vacancies/matching, maar sorteer op lengte van werkervaring (?))

	NIEUW:
	* GET /profile/user/:id/workExperience
		geeft alle werkervaring van die gebruiker terug
		check
	* POST /profile/user/:id/workExperience
		neemt een veld en een duratie (aangenomen dat dat in jaar is)
		check
	* POST /profile/user/:id/workExperience/remove
		neemt een veld en een duratie (en een token) en verwijdert die van de DB
		check

Algemeen:
	* Security toevoegen
		(bijv. inloggen mogelijk maken & afdwingen)
		Check (op het moment)
	* overal error codes zetten & fatsoenlijkere errorberichten geven
		TODO
	* alles ns testen op bugs enz
		work in progress

Verslag:
	* aanpassen van beschrijving endpoints aan uiteindelijke implementatie
	* aanpassen van beschrijving RDF-XML aan uiteindelijke implementatie
	* Demo/Verdediging voorbereiden