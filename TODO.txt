
Endpoints:
	* POST /login
	* POST /profile/user/:id
		(nog een aantal params)
	* GET /profile/user/:id
		(checken of user wel bestaat)
	* POST /job-hunting
	* GET /open-connections
		(welke details moeten er teruggegeven worden?)
	* GET /vacancies/matching
		(moet nog wel wat gebeuren:
			* ook checken of user een hoger diploma heeft dan hetgene opgelijst:
				zou gedaan kunnen worden door alle diplomas op te lijsten?
					bijv #user1 heeft LagereSchoolDiploma, MiddelbareSchoolDiploma, Bachelor of Science, Master of Science, Professor of Science ? kan zonder al te veel moeite in RDF
				zou ook gedaan kunnen door RDF klasses te gebruiken, denk ik (Gilles) ?
			* ook checken op work experience:
				op het moment is het een beetje onduidelijk hoe de work experience werkt
					in de voorbeelden heb ik (Gilles) gewoon gezegd "4 years" maar niet als wat of waar
				gaan we huidige work experience dan in een lijst moeten omzetten of zo
					(gaat de prettifier wel gruwelijk breken, maar da kan wel gemaakt worden)
		)
	* PUT /profile/company
	* GET /profile/company/:id
	* POST /profile/company/:id
	* PUT /vacancy/
		(staat in verslag als /vacancy/:details, mss beter om met xform-url-encoded te werken?)
	* GET /vacancy/:id/matching
		(herbruik functie /vacancies/matching)

Algemeen:
	* Security toevoegen
		(bijv. inloggen mogelijk maken & afdwingen)
	* overal error codes zetten & fatsoenlijkere errorberichten geven
	* alles ns testen op bugs enz

Verslag:
	* aanpassen van beschrijving endpoints aan uiteindelijke implementatie
	* aanpassen van beschrijving RDF-XML aan uiteindelijke implementatie
	* Demo/Verdediging voorbereiden